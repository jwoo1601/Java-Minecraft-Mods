buildscript {

    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
    
    ext {
//        javaVersion= '1.8'
    
        versionFilePath= "properties\\version.properties"
        targetPropsPath= ""
        
        cautionComment= "DO NOT MODIFY BELOW SETTINGS!!\nMODIFICATION WOULD CAUSE SERIOUS PROBLEM!!"
    }
    
}

apply plugin: 'forge'

version = null
group= "jwk.suddensurvival" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "[Universal] 3Kids Sudden Survival"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}

dependencies {

}

project.afterEvaluate {
    compileApiJava.dependsOn("updateVersion")
}

task updateMajor << {
    def versionFile = file(versionFilePath)
    
        if (versionFile.canRead() && versionFile.canWrite()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(versionFile))
        
        props['majorVersion'] = Integer.toString(props['majorVersion'].toInteger() + 1)
        props.store(versionFile.newWriter(), cautionComment)
     }
        
    else
        throw new GradleException("An Fatal Error occured during updating MAJOR Version")
}

task updateMinor << {
    def versionFile = file(versionFilePath)
    
        if (versionFile.canRead() && versionFile.canWrite()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(versionFile))
        
        props['minorVersion'] = Integer.toString(props['minorVersion'].toInteger() + 1)
        props.store(versionFile.newWriter(), cautionComment)
     }
        
    else
        throw new GradleException("An Fatal Error occured during updating MINOR Version")
}

task updatePatch << {
    def versionFile = file(versionFilePath)
    
        if (versionFile.canRead() && versionFile.canWrite()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(versionFile))
        
        props['patchVersion'] = Integer.toString(props['patchVersion'].toInteger() + 1)
        props.store(versionFile.newWriter(), cautionComment)
     }
        
    else
        throw new GradleException("An Fatal Error occured during updating PATCH Version")
}

task updateVersion << {
    def versionFile = file(versionFilePath)
    
    if (versionFile.canRead() && versionFile.canWrite()) {
        def Properties props = new Properties()
        props.load(new FileInputStream(versionFile))
        
        def mcVersion = props['mcVersion']
        def majorVersion = props['majorVersion']
        def minorVersion = props['minorVersion']
        def patchVersion = props['patchVersion']
        
        def buildNum = Integer.toString(props['buildNum'].toInteger() + 1)
        
        props['buildNum'] = buildNum
        props.store(versionFile.newWriter(), cautionComment)
        
        project.version = mcVersion + "-" + majorVersion + "." + minorVersion + "." + patchVersion + " #" + buildNum
        
        println ("################# JWK BUILD SYSTEM ##############\n"
                + "Version: " + project.version + "\n"
              + "#################################################")
     }
        
    else
        throw new GradleException("Could not read version.properties")
}

jar {

    into (targetPropsPath) {        
        from files(versionFilePath)
    }
    
}

processResources
{    
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}